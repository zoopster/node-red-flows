[{"id":"ab85ab82.da4228","type":"debug","z":"a3feeb82.590498","name":"","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"payload","targetType":"msg","x":590,"y":120,"wires":[]},{"id":"8543f790.673408","type":"rpi-sensehat in","z":"a3feeb82.590498","name":"","motion":true,"env":false,"stick":false,"x":320,"y":160,"wires":[["ab85ab82.da4228","7ff47556.48cdfc"]]},{"id":"213fc89b.7750f8","type":"rpi-sensehat out","z":"a3feeb82.590498","name":"","x":710,"y":160,"wires":[]},{"id":"7ff47556.48cdfc","type":"function","z":"a3feeb82.590498","name":"Marble Maze","func":"// A Function to generate a new goal position\nfunction updateGoal() {\n do {\n goalX = Math.floor(Math.random()*7)+1;\n goalY = Math.floor(Math.random()*7)+1;\n } while(checkWall(goalX,goalY));\n \n flow.set('goalX',goalX);\n flow.set('goalY',goalY); \n}\n\n// Generate 'walls' - 10 randomly placed blocks\nfunction generateWalls() {\n walls = [];\n for (var i=0;i<10;i++) {\n var wx = 0;\n var wy = 0;\n do {\n wx = Math.floor(Math.random()*8);\n wy = Math.floor(Math.random()*8);\n } while(wx === x && wy === y);\n walls.push({x:wx,y:wy});\n }\n flow.set('walls',walls);\n}\n\n// Check whether a given position collides with any of the walls\nfunction checkWall(x,y) {\n for (var i=0;i<walls.length;i++) {\n if (walls[i].x === x && walls[i].y === y) {\n return true;\n }\n }\n return false;\n}\n\n// Retrieve the current player positions from local context\nvar x = context.get('x');\nvar y = context.get('y');\n\n// Retrieve the current goal position from flow context\nvar goalX = flow.get('goalX');\nvar goalY = flow.get('goalY');\n\n// Retrieve the current walls from flow context\nvar walls = flow.get('walls');\n\n// Generate new walls if needed\nif (!walls) {\n generateWalls();\n}\n\n// Generate a new goal if needed\nif (isNaN(goalX) || isNaN(goalY)) {\n updateGoal();\n}\n\n\nvar moved = false;\nvar ox = x;\nvar oy = y;\n\n// Initialise the player position\nif (isNaN(x) || isNaN(y)) {\n ox = 3;\n oy = 3;\n x = 3;\n y = 3;\n moved = true;\n} else {\n // Retrieve the current roll & pitch from the message\n // arriving from the SenseHAT\n var roll = msg.payload.orientation.roll;\n var pitch = msg.payload.orientation.pitch;\n\n // Move the player based on tilt, ensuring it stays\n // within the bounds of the screen\n var sensitivity = 7;\n if (roll > sensitivity && roll < 90) {\n y += 1;\n moved = true;\n if (y > 6) { y = 7; }\n } else if (roll < 360-sensitivity && roll > 270) {\n y -= 1;\n moved = true;\n if (y < 1) { y = 0; }\n }\n if (pitch > sensitivity && pitch < 90) {\n x -= 1;\n moved = true;\n if (x < 1) { x = 0; }\n } else if (pitch < 360-sensitivity && pitch > 270) {\n x += 1;\n moved = true;\n if (x > 6) { x = 7; }\n }\n // If the resultant position hits a wall, go back to\n // where it started\n if (checkWall(x,y)) {\n x = ox;\n y = oy;\n }\n}\n\n// Store the new player position\ncontext.set('x',x);\ncontext.set('y',y);\n\nif (moved) {\n // If the player is on the goal, generate a new set of\n // walls and goal position\n if (x === goalX && y === goalY) {\n generateWalls();\n updateGoal();\n // Blank the display\n msg.payload = \"*,*,off,\";\n } else {\n // Blank the old position of the player\n msg.payload = ox+\",\"+oy+\",off,\";\n }\n // Draw each of the walls\n for (var i =0;i<walls.length;i++) {\n msg.payload += walls[i].x+\",\"+walls[i].y+\",green,\";\n }\n // Draw the goal and player position\n msg.payload += goalX+\",\"+goalY+\",blue,\"+x+\",\"+y+\",red\";\n\n // Pass the message on to the SenseHAT Out node\n return msg;\n}\n\n// Nothing has moved so no need to update screen - return nothing\nreturn null;","outputs":"1","noerr":0,"x":530,"y":160,"wires":[["213fc89b.7750f8"]]},{"id":"413d39f7.2f3028","type":"comment","z":"a3feeb82.590498","name":"Compass for the Sense Hat","info":"","x":380,"y":100,"wires":[]}]